<?php

namespace Proxies\__CG__\TFT\personneBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class resultat extends \TFT\personneBundle\Entity\resultat implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'TFT\\personneBundle\\Entity\\resultat' . "\0" . 'id', '' . "\0" . 'TFT\\personneBundle\\Entity\\resultat' . "\0" . 'idjoueur1', '' . "\0" . 'TFT\\personneBundle\\Entity\\resultat' . "\0" . 'idjoueur2', '' . "\0" . 'TFT\\personneBundle\\Entity\\resultat' . "\0" . 'nomjoueur1', '' . "\0" . 'TFT\\personneBundle\\Entity\\resultat' . "\0" . 'nomjoueur2', '' . "\0" . 'TFT\\personneBundle\\Entity\\resultat' . "\0" . 'set1joueur1', '' . "\0" . 'TFT\\personneBundle\\Entity\\resultat' . "\0" . 'set2joueur1', '' . "\0" . 'TFT\\personneBundle\\Entity\\resultat' . "\0" . 'set3joueur1', '' . "\0" . 'TFT\\personneBundle\\Entity\\resultat' . "\0" . 'set1joueur2', '' . "\0" . 'TFT\\personneBundle\\Entity\\resultat' . "\0" . 'set2joueur2', '' . "\0" . 'TFT\\personneBundle\\Entity\\resultat' . "\0" . 'set3joueur2', '' . "\0" . 'TFT\\personneBundle\\Entity\\resultat' . "\0" . 'gagnant'];
        }

        return ['__isInitialized__', '' . "\0" . 'TFT\\personneBundle\\Entity\\resultat' . "\0" . 'id', '' . "\0" . 'TFT\\personneBundle\\Entity\\resultat' . "\0" . 'idjoueur1', '' . "\0" . 'TFT\\personneBundle\\Entity\\resultat' . "\0" . 'idjoueur2', '' . "\0" . 'TFT\\personneBundle\\Entity\\resultat' . "\0" . 'nomjoueur1', '' . "\0" . 'TFT\\personneBundle\\Entity\\resultat' . "\0" . 'nomjoueur2', '' . "\0" . 'TFT\\personneBundle\\Entity\\resultat' . "\0" . 'set1joueur1', '' . "\0" . 'TFT\\personneBundle\\Entity\\resultat' . "\0" . 'set2joueur1', '' . "\0" . 'TFT\\personneBundle\\Entity\\resultat' . "\0" . 'set3joueur1', '' . "\0" . 'TFT\\personneBundle\\Entity\\resultat' . "\0" . 'set1joueur2', '' . "\0" . 'TFT\\personneBundle\\Entity\\resultat' . "\0" . 'set2joueur2', '' . "\0" . 'TFT\\personneBundle\\Entity\\resultat' . "\0" . 'set3joueur2', '' . "\0" . 'TFT\\personneBundle\\Entity\\resultat' . "\0" . 'gagnant'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (resultat $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setNomjoueur1($nomjoueur1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNomjoueur1', [$nomjoueur1]);

        return parent::setNomjoueur1($nomjoueur1);
    }

    /**
     * {@inheritDoc}
     */
    public function getNomjoueur1()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNomjoueur1', []);

        return parent::getNomjoueur1();
    }

    /**
     * {@inheritDoc}
     */
    public function setNomjoueur2($nomjoueur2)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNomjoueur2', [$nomjoueur2]);

        return parent::setNomjoueur2($nomjoueur2);
    }

    /**
     * {@inheritDoc}
     */
    public function getNomjoueur2()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNomjoueur2', []);

        return parent::getNomjoueur2();
    }

    /**
     * {@inheritDoc}
     */
    public function setSet1joueur1($set1joueur1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSet1joueur1', [$set1joueur1]);

        return parent::setSet1joueur1($set1joueur1);
    }

    /**
     * {@inheritDoc}
     */
    public function getSet1joueur1()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSet1joueur1', []);

        return parent::getSet1joueur1();
    }

    /**
     * {@inheritDoc}
     */
    public function setSet2joueur1($set2joueur1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSet2joueur1', [$set2joueur1]);

        return parent::setSet2joueur1($set2joueur1);
    }

    /**
     * {@inheritDoc}
     */
    public function getSet2joueur1()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSet2joueur1', []);

        return parent::getSet2joueur1();
    }

    /**
     * {@inheritDoc}
     */
    public function setSet3joueur1($set3joueur1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSet3joueur1', [$set3joueur1]);

        return parent::setSet3joueur1($set3joueur1);
    }

    /**
     * {@inheritDoc}
     */
    public function getSet3joueur1()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSet3joueur1', []);

        return parent::getSet3joueur1();
    }

    /**
     * {@inheritDoc}
     */
    public function setSet1joueur2($set1joueur2)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSet1joueur2', [$set1joueur2]);

        return parent::setSet1joueur2($set1joueur2);
    }

    /**
     * {@inheritDoc}
     */
    public function getSet1joueur2()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSet1joueur2', []);

        return parent::getSet1joueur2();
    }

    /**
     * {@inheritDoc}
     */
    public function setSet2joueur2($set2joueur2)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSet2joueur2', [$set2joueur2]);

        return parent::setSet2joueur2($set2joueur2);
    }

    /**
     * {@inheritDoc}
     */
    public function getSet2joueur2()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSet2joueur2', []);

        return parent::getSet2joueur2();
    }

    /**
     * {@inheritDoc}
     */
    public function setSet3joueur2($set3joueur2)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSet3joueur2', [$set3joueur2]);

        return parent::setSet3joueur2($set3joueur2);
    }

    /**
     * {@inheritDoc}
     */
    public function getSet3joueur2()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSet3joueur2', []);

        return parent::getSet3joueur2();
    }

    /**
     * {@inheritDoc}
     */
    public function setGagnant($gagnant)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGagnant', [$gagnant]);

        return parent::setGagnant($gagnant);
    }

    /**
     * {@inheritDoc}
     */
    public function getGagnant()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGagnant', []);

        return parent::getGagnant();
    }

}
