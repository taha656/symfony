<?php

use Symfony\Component\Routing\RequestContext;
use Symfony\Component\Routing\Exception\RouteNotFoundException;
use Psr\Log\LoggerInterface;

/**
 * appDevUrlGenerator
 *
 * This class has been auto-generated
 * by the Symfony Routing Component.
 */
class appDevUrlGenerator extends Symfony\Component\Routing\Generator\UrlGenerator
{
    private static $declaredRoutes = array(
        '_assetic_35a8e64' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'assetic.controller:render',    'name' => '35a8e64',    'pos' => NULL,    '_format' => 'js',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/js/35a8e64.js',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_assetic_35a8e64_0' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'assetic.controller:render',    'name' => '35a8e64',    'pos' => 0,    '_format' => 'js',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/js/35a8e64_comments_1.js',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_wdt' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:toolbarAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/_wdt',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_home' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:homeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_search' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:searchAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/search',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_search_bar' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:searchBarAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/search_bar',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_purge' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:purgeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/purge',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_info' => array (  0 =>   array (    0 => 'about',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:infoAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'about',    ),    1 =>     array (      0 => 'text',      1 => '/_profiler/info',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_phpinfo' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:phpinfoAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/phpinfo',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_search_results' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:searchResultsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/search/results',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:panelAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_router' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.router:panelAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/router',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_exception' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.exception:showAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/exception',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_exception_css' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.exception:cssAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/exception.css',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_configurator_home' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Sensio\\Bundle\\DistributionBundle\\Controller\\ConfiguratorController::checkAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_configurator/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_configurator_step' => array (  0 =>   array (    0 => 'index',  ),  1 =>   array (    '_controller' => 'Sensio\\Bundle\\DistributionBundle\\Controller\\ConfiguratorController::stepAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'index',    ),    1 =>     array (      0 => 'text',      1 => '/_configurator/step',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_configurator_final' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Sensio\\Bundle\\DistributionBundle\\Controller\\ConfiguratorController::finalAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_configurator/final',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_twig_error_test' => array (  0 =>   array (    0 => 'code',    1 => '_format',  ),  1 =>   array (    '_controller' => 'twig.controller.preview_error:previewErrorPageAction',    '_format' => 'html',  ),  2 =>   array (    'code' => '\\d+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => '[^/]++',      3 => '_format',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '\\d+',      3 => 'code',    ),    2 =>     array (      0 => 'text',      1 => '/_error',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'homepage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\DefaultController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/app/example',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_security_login' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::loginAction',  ),  2 =>   array (    '_method' => 'GET|POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/login',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_security_check' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::checkAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/login_check',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_security_logout' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::logoutAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/logout',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_profile_show' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ProfileController::showAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/profile/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_profile_edit' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ProfileController::editAction',  ),  2 =>   array (    '_method' => 'GET|POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/profile/edit',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_registration_register' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::registerAction',  ),  2 =>   array (    '_method' => 'GET|POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/register/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_registration_check_email' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::checkEmailAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/register/check-email',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_registration_confirm' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::confirmAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/register/confirm',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_registration_confirmed' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::confirmedAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/register/confirmed',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_resetting_request' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::requestAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/resetting/request',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_resetting_send_email' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::sendEmailAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/resetting/send-email',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_resetting_check_email' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::checkEmailAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/resetting/check-email',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_resetting_reset' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::resetAction',  ),  2 =>   array (    '_method' => 'GET|POST',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/resetting/reset',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_change_password' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ChangePasswordController::changePasswordAction',  ),  2 =>   array (    '_method' => 'GET|POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/profile/change-password',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_arbitre_registration' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\RegistrationAController::registerArbitreAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/arbitre/register',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_dopage_registration' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\RegistrationDController::registerDopageAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/dopage/register',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_fan_registration' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\RegistrationFController::registerfanAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/fan/register',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_joueur_registration' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\RegistrationJController::registerJoueurAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/joueur/register',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_medecin_registration' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\RegistrationMController::registerMedecinAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/medecin/register',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_comment_new_threads' => array (  0 =>   array (    0 => '_format',  ),  1 =>   array (    '_controller' => 'FOS\\CommentBundle\\Controller\\ThreadController::newThreadsAction',    '_format' => 'html',  ),  2 =>   array (    '_format' => 'json|xml|html',    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => 'json|xml|html',      3 => '_format',    ),    1 =>     array (      0 => 'text',      1 => '/threads/new',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_comment_edit_thread_commentable' => array (  0 =>   array (    0 => 'id',    1 => '_format',  ),  1 =>   array (    '_controller' => 'FOS\\CommentBundle\\Controller\\ThreadController::editThreadCommentableAction',    '_format' => 'html',  ),  2 =>   array (    '_format' => 'json|xml|html',    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => 'json|xml|html',      3 => '_format',    ),    1 =>     array (      0 => 'text',      1 => '/commentable/edit',    ),    2 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    3 =>     array (      0 => 'text',      1 => '/threads',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_comment_new_thread_comments' => array (  0 =>   array (    0 => 'id',    1 => '_format',  ),  1 =>   array (    '_controller' => 'FOS\\CommentBundle\\Controller\\ThreadController::newThreadCommentsAction',    '_format' => 'html',  ),  2 =>   array (    '_format' => 'json|xml|html',    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => 'json|xml|html',      3 => '_format',    ),    1 =>     array (      0 => 'text',      1 => '/comments/new',    ),    2 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    3 =>     array (      0 => 'text',      1 => '/threads',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_comment_remove_thread_comment' => array (  0 =>   array (    0 => 'id',    1 => 'commentId',    2 => '_format',  ),  1 =>   array (    '_controller' => 'FOS\\CommentBundle\\Controller\\ThreadController::removeThreadCommentAction',    '_format' => 'html',  ),  2 =>   array (    '_format' => 'json|xml|html',    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => 'json|xml|html',      3 => '_format',    ),    1 =>     array (      0 => 'text',      1 => '/remove',    ),    2 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'commentId',    ),    3 =>     array (      0 => 'text',      1 => '/comments',    ),    4 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    5 =>     array (      0 => 'text',      1 => '/threads',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_comment_edit_thread_comment' => array (  0 =>   array (    0 => 'id',    1 => 'commentId',    2 => '_format',  ),  1 =>   array (    '_controller' => 'FOS\\CommentBundle\\Controller\\ThreadController::editThreadCommentAction',    '_format' => 'html',  ),  2 =>   array (    '_format' => 'json|xml|html',    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => 'json|xml|html',      3 => '_format',    ),    1 =>     array (      0 => 'text',      1 => '/edit',    ),    2 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'commentId',    ),    3 =>     array (      0 => 'text',      1 => '/comments',    ),    4 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    5 =>     array (      0 => 'text',      1 => '/threads',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_comment_new_thread_comment_votes' => array (  0 =>   array (    0 => 'id',    1 => 'commentId',    2 => '_format',  ),  1 =>   array (    '_controller' => 'FOS\\CommentBundle\\Controller\\ThreadController::newThreadCommentVotesAction',    '_format' => 'html',  ),  2 =>   array (    '_format' => 'json|xml|html',    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => 'json|xml|html',      3 => '_format',    ),    1 =>     array (      0 => 'text',      1 => '/votes/new',    ),    2 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'commentId',    ),    3 =>     array (      0 => 'text',      1 => '/comments',    ),    4 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    5 =>     array (      0 => 'text',      1 => '/threads',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_comment_get_thread' => array (  0 =>   array (    0 => 'id',    1 => '_format',  ),  1 =>   array (    '_controller' => 'FOS\\CommentBundle\\Controller\\ThreadController::getThreadAction',    '_format' => 'html',  ),  2 =>   array (    '_format' => 'json|xml|html',    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => 'json|xml|html',      3 => '_format',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/\\.]++',      3 => 'id',    ),    2 =>     array (      0 => 'text',      1 => '/threads',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_comment_get_threads' => array (  0 =>   array (    0 => '_format',  ),  1 =>   array (    '_controller' => 'FOS\\CommentBundle\\Controller\\ThreadController::getThreadsActions',    '_format' => 'html',  ),  2 =>   array (    '_format' => 'json|xml|html',    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => 'json|xml|html',      3 => '_format',    ),    1 =>     array (      0 => 'text',      1 => '/threads',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_comment_post_threads' => array (  0 =>   array (    0 => '_format',  ),  1 =>   array (    '_controller' => 'FOS\\CommentBundle\\Controller\\ThreadController::postThreadsAction',    '_format' => 'html',  ),  2 =>   array (    '_format' => 'json|xml|html',    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => 'json|xml|html',      3 => '_format',    ),    1 =>     array (      0 => 'text',      1 => '/threads',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_comment_patch_thread_commentable' => array (  0 =>   array (    0 => 'id',    1 => '_format',  ),  1 =>   array (    '_controller' => 'FOS\\CommentBundle\\Controller\\ThreadController::patchThreadCommentableAction',    '_format' => 'html',  ),  2 =>   array (    '_format' => 'json|xml|html',    '_method' => 'PATCH',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => 'json|xml|html',      3 => '_format',    ),    1 =>     array (      0 => 'text',      1 => '/commentable',    ),    2 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    3 =>     array (      0 => 'text',      1 => '/threads',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_comment_get_thread_comment' => array (  0 =>   array (    0 => 'id',    1 => 'commentId',    2 => '_format',  ),  1 =>   array (    '_controller' => 'FOS\\CommentBundle\\Controller\\ThreadController::getThreadCommentAction',    '_format' => 'html',  ),  2 =>   array (    '_format' => 'json|xml|html',    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => 'json|xml|html',      3 => '_format',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/\\.]++',      3 => 'commentId',    ),    2 =>     array (      0 => 'text',      1 => '/comments',    ),    3 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    4 =>     array (      0 => 'text',      1 => '/threads',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_comment_patch_thread_comment_state' => array (  0 =>   array (    0 => 'id',    1 => 'commentId',    2 => '_format',  ),  1 =>   array (    '_controller' => 'FOS\\CommentBundle\\Controller\\ThreadController::patchThreadCommentStateAction',    '_format' => 'html',  ),  2 =>   array (    '_format' => 'json|xml|html',    '_method' => 'PATCH',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => 'json|xml|html',      3 => '_format',    ),    1 =>     array (      0 => 'text',      1 => '/state',    ),    2 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'commentId',    ),    3 =>     array (      0 => 'text',      1 => '/comments',    ),    4 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    5 =>     array (      0 => 'text',      1 => '/threads',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_comment_put_thread_comments' => array (  0 =>   array (    0 => 'id',    1 => 'commentId',    2 => '_format',  ),  1 =>   array (    '_controller' => 'FOS\\CommentBundle\\Controller\\ThreadController::putThreadCommentsAction',    '_format' => 'html',  ),  2 =>   array (    '_format' => 'json|xml|html',    '_method' => 'PUT',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => 'json|xml|html',      3 => '_format',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/\\.]++',      3 => 'commentId',    ),    2 =>     array (      0 => 'text',      1 => '/comments',    ),    3 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    4 =>     array (      0 => 'text',      1 => '/threads',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_comment_get_thread_comments' => array (  0 =>   array (    0 => 'id',    1 => '_format',  ),  1 =>   array (    '_controller' => 'FOS\\CommentBundle\\Controller\\ThreadController::getThreadCommentsAction',    '_format' => 'html',  ),  2 =>   array (    '_format' => 'json|xml|html',    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => 'json|xml|html',      3 => '_format',    ),    1 =>     array (      0 => 'text',      1 => '/comments',    ),    2 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    3 =>     array (      0 => 'text',      1 => '/threads',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_comment_post_thread_comments' => array (  0 =>   array (    0 => 'id',    1 => '_format',  ),  1 =>   array (    '_controller' => 'FOS\\CommentBundle\\Controller\\ThreadController::postThreadCommentsAction',    '_format' => 'html',  ),  2 =>   array (    '_format' => 'json|xml|html',    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => 'json|xml|html',      3 => '_format',    ),    1 =>     array (      0 => 'text',      1 => '/comments',    ),    2 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    3 =>     array (      0 => 'text',      1 => '/threads',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_comment_get_thread_comment_votes' => array (  0 =>   array (    0 => 'id',    1 => 'commentId',    2 => '_format',  ),  1 =>   array (    '_controller' => 'FOS\\CommentBundle\\Controller\\ThreadController::getThreadCommentVotesAction',    '_format' => 'html',  ),  2 =>   array (    '_format' => 'json|xml|html',    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => 'json|xml|html',      3 => '_format',    ),    1 =>     array (      0 => 'text',      1 => '/votes',    ),    2 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'commentId',    ),    3 =>     array (      0 => 'text',      1 => '/comments',    ),    4 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    5 =>     array (      0 => 'text',      1 => '/threads',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_comment_post_thread_comment_votes' => array (  0 =>   array (    0 => 'id',    1 => 'commentId',    2 => '_format',  ),  1 =>   array (    '_controller' => 'FOS\\CommentBundle\\Controller\\ThreadController::postThreadCommentVotesAction',    '_format' => 'html',  ),  2 =>   array (    '_format' => 'json|xml|html',    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => 'json|xml|html',      3 => '_format',    ),    1 =>     array (      0 => 'text',      1 => '/votes',    ),    2 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'commentId',    ),    3 =>     array (      0 => 'text',      1 => '/comments',    ),    4 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    5 =>     array (      0 => 'text',      1 => '/threads',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'ajout_admin_match' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\matchController::ajoutmatchAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajoutmatch',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'afficher_user_match' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\matchController::afficherMatchuserAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/affichermatchuser',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'afficher_admin_match' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\matchController::afficherMatchadminAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/affichermatchadmin',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'supprimer_match' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\matchController::supprimermatchAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/supprimermatch',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'rechercher_admin_match' => array (  0 =>   array (    0 => 'nom',  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\matchController::recherchermatchAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'nom',    ),    1 =>     array (      0 => 'text',      1 => '/recherchermatch',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'modifier_match' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\matchController::modifiermatchAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/modifiermatch',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'afficher_admin_resultat' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\ResultatController::afficheradminresultatAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/afficherresultatadmin',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'afficher_user_resultat' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\ResultatController::afficheruserresultatAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/afficherresultatuser',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'rechercher_admin_resultat' => array (  0 =>   array (    0 => 'nom',  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\ResultatController::rechercherresultatAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'nom',    ),    1 =>     array (      0 => 'text',      1 => '/rechercherresultat',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_resultat_ajouter_homepage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\ResultatController::ajoutresultatAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajouterresultat',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'modifier_admin_resultat' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\ResultatController::modifierresultatAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/modifierresultat',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'supprimer_admin_resultat' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\ResultatController::supprimerresultatAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/supprimerresultat',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_match_affich_homepage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\matchController::affichMatchuserAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/affichermatchuser',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_match_affecterarbitre_homepage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\matchController::affecterarbitreAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/affecterarbitre',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_ticket_cancelpaiement_homepage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\TicketController::CancelAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/cancelpaiement',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_ticket_okpaiement_homepage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\TicketController::okpaiementAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/okpaiement',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_ticket_paiement_homepage' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\TicketController::paiementAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/paiement',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tf_tpersonne_homepage' => array (  0 =>   array (    0 => 'name',  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\DefaultController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'name',    ),    1 =>     array (      0 => 'text',      1 => '/hello',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'Dopage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\DefaultController::dopAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/dop',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'Medecin' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\DefaultController::medAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/med',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'Arbitre' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\DefaultController::arbAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/arb',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'Admin' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\DefaultController::admAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/admin',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'Joueur' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\DefaultController::joueurAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/joueur',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'FAN' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\DefaultController::fanAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/fan',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'Utilisateur' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\DefaultController::userAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/user',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'afficherListUser' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\DefaultController::listuserAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/Listuser',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'afficherListEncours' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\DefaultController::afficheuserAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/List',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'Accepter' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\DefaultController::AccepterAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/TraitAccepter',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'Refuser' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\DefaultController::RefuserAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/TraitRefuser',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'Inscription_all' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\DefaultController::adminAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/inscri',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'comment_article' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\CommentController::CommentaireAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/affi',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'comment_forum' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\CommentController::AjoutForumAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/afficher',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'repondre_forum' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\CommentController::repondreAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/rep',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'ajout_admin_stade' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\PersonneController::ajoutStadeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajoutStade',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'admin_index_homepage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\PersonneController::adminIndexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/adminIndex',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'ajout_admin_pronostic' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\PersonneController::ajoutPronosticAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajoutPronostic',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'affich_pronostic' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\PronosticController::affichPronosticAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/affichPronostic',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'resultatPronostic' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\PronosticController::resultatPronosticAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/resultatPronostic',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'recherchePronostic' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\PronosticController::recherchePronosticAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/recherchePronostic',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'affich_admin_stade' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\PersonneController::affichStadeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/affichStade',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'supprimer_admin_stade' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\PersonneController::supprimerStadeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/supprimer',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'modifier_admin_stade' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\PersonneController::modifierStadeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/modifier',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'rechercher_admin_stade' => array (  0 =>   array (    0 => 'nom',  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\PersonneController::rechercherStadeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'nom',    ),    1 =>     array (      0 => 'text',      1 => '/rechercher',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'exporter_admin_stade' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\PersonneController::exporterStadeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/exporter',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'rediriger_admin_stade' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\PersonneController::redirigerStadeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/rediriger',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'rechercherForum_forum' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\CommentController::rechercherForumAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/rechercherForum',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'AdminForum' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\CommentController::AdminforumAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/Adminad',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_afficherclassement' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\ClassementController::affichageClassementAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/classement',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_grapheChartLine' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\GrapheController::chartLineAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/chartLine',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'ajoutjeu_match' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\PronosticController::ajoutJeuDQLAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajoutJeu',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_personne_aff' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\PersonneController::listeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/affses',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_personne_templ' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\PersonneController::vueAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/vue',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_personne_ajout' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\PersonneController::ajoutAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajout',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_personne_listsup' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\PersonneController::listsupAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/listsup',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_personne_sup' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\PersonneController::supprimerAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/sup',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_personne_listup' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\PersonneController::listupAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/listup',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_personne_upd' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\PersonneController::modifierAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/mod',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_ajout_article' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\ArticleController::ajoutAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajt',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_aff_article' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\ArticleController::listeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/afff',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_sup_article' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\ArticleController::supprimerAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/supar',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_listsup_article' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\ArticleController::listsupAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/lasup',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_mod_article' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\ArticleController::modifierAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/modar',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_listup_article' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\ArticleController::listupAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/laup',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_ajout_image' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\ImageController::uploadAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajtimg',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_liste_image' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\ImageController::listAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/liste',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_aff_image' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\ImageController::afficheAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/aff',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'tft_image_route' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'TFT\\personneBundle\\Controller\\ImageController::photoAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/image',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_welcome' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Acme\\DemoBundle\\Controller\\WelcomeController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_demo_login' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Acme\\DemoBundle\\Controller\\SecuredController::loginAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/demo/secured/login',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_demo_security_check' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Acme\\DemoBundle\\Controller\\SecuredController::securityCheckAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/demo/secured/login_check',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_demo_logout' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Acme\\DemoBundle\\Controller\\SecuredController::logoutAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/demo/secured/logout',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'acme_demo_secured_hello' => array (  0 =>   array (  ),  1 =>   array (    'name' => 'World',    '_controller' => 'Acme\\DemoBundle\\Controller\\SecuredController::helloAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/demo/secured/hello',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_demo_secured_hello' => array (  0 =>   array (    0 => 'name',  ),  1 =>   array (    '_controller' => 'Acme\\DemoBundle\\Controller\\SecuredController::helloAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'name',    ),    1 =>     array (      0 => 'text',      1 => '/demo/secured/hello',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_demo_secured_hello_admin' => array (  0 =>   array (    0 => 'name',  ),  1 =>   array (    '_controller' => 'Acme\\DemoBundle\\Controller\\SecuredController::helloadminAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'name',    ),    1 =>     array (      0 => 'text',      1 => '/demo/secured/hello/admin',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_demo' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Acme\\DemoBundle\\Controller\\DemoController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/demo/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_demo_hello' => array (  0 =>   array (    0 => 'name',  ),  1 =>   array (    '_controller' => 'Acme\\DemoBundle\\Controller\\DemoController::helloAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'name',    ),    1 =>     array (      0 => 'text',      1 => '/demo/hello',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_demo_contact' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Acme\\DemoBundle\\Controller\\DemoController::contactAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/demo/contact',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
    );

    /**
     * Constructor.
     */
    public function __construct(RequestContext $context, LoggerInterface $logger = null)
    {
        $this->context = $context;
        $this->logger = $logger;
    }

    public function generate($name, $parameters = array(), $referenceType = self::ABSOLUTE_PATH)
    {
        if (!isset(self::$declaredRoutes[$name])) {
            throw new RouteNotFoundException(sprintf('Unable to generate a URL for the named route "%s" as such route does not exist.', $name));
        }

        list($variables, $defaults, $requirements, $tokens, $hostTokens, $requiredSchemes) = self::$declaredRoutes[$name];

        return $this->doGenerate($variables, $defaults, $requirements, $tokens, $parameters, $name, $referenceType, $hostTokens, $requiredSchemes);
    }
}
